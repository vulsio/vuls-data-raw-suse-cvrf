{
	"document_title": "Security update for rust, rust1.58, rust1.59",
	"document_type": "SUSE Patch",
	"document_publisher": {
		"type": "Vendor",
		"contact_details": "security@suse.de",
		"issuing_authority": "SUSE Security Team"
	},
	"document_tracking": {
		"identification": {
			"id": "openSUSE-SU-2022:0843-1"
		},
		"status": "Final",
		"version": "1",
		"revision_history": {
			"revision": {
				"number": "1",
				"date": "2022-03-15T10:33:50Z",
				"description": "current"
			}
		},
		"initial_release_date": "2022-03-15T10:33:50Z",
		"current_release_date": "2022-03-15T10:33:50Z",
		"generator": {
			"engine": "cve-database/bin/generate-cvrf.pl",
			"date": "2017-02-24T01:00:00Z"
		}
	},
	"document_notes": [
		{
			"text": "Security update for rust, rust1.58, rust1.59",
			"title": "Topic",
			"type": "Summary"
		},
		{
			"text": "This update for rust, rust1.58, rust1.59 fixes the following issues:\n\nThis update provides both rust1.58 and rust1.59.\n\nChanges in rust1.58:\n\n- Add recommends for GCC for installs to be able to link.\n- Add suggests for lld/clang which are faster than gcc for linking to\n  allow users choice on what they use.\n- CVE-2022-21658: Resolve race condition in std::fs::remove_dir_all (bsc#1194767)\n\nVersion 1.58.0 (2022-01-13)\n==========================\n\nLanguage\n--------\n- [Format strings can now capture arguments simply by writing `{ident}` in the string.][90473] This works in all macros accepting format strings. Support for this in `panic!` (`panic!('{ident}')`) requires the 2021 edition; panic invocations in previous editions that appear to be trying to use this will result in a warning lint about not having the intended effect.\n- [`*const T` pointers can now be dereferenced in const contexts.][89551]\n- [The rules for when a generic struct implements `Unsize` have been relaxed.][90417]\nCompiler\n--------\n- [Add LLVM CFI support to the Rust compiler][89652]\n- [Stabilize -Z strip as -C strip][90058]. Note that while release builds already don't add debug symbols for the code you compile, the compiled standard library that ships with Rust includes debug symbols, so you may want to use the `strip` option to remove these symbols to produce smaller release binaries. Note that this release only includes support in rustc, not directly in cargo.\n- [Add support for LLVM coverage mapping format versions 5 and 6][91207]\n- [Emit LLVM optimization remarks when enabled with `-Cremark`][90833]\n- [Update the minimum external LLVM to 12][90175]\n- [Add `x86_64-unknown-none` at Tier 3*][89062]\n- [Build musl dist artifacts with debuginfo enabled][90733]. When building release binaries using musl, you may want to use the newly stabilized strip option to remove these debug symbols, reducing the size of your binaries.\n- [Don't abort compilation after giving a lint error][87337]\n- [Error messages point at the source of trait bound obligations in more places][89580]\n\\* Refer to Rust's [platform support page][platform-support-doc] for more\n   information on Rust's tiered platform support.\n\nLibraries\n---------\n\n- [All remaining functions in the standard library have `#[must_use]` annotations where appropriate][89692], producing a warning when ignoring their return value. This helps catch mistakes such as expecting a function to mutate a value in place rather than return a new value.\n- [Paths are automatically canonicalized on Windows for operations that support it][89174]\n- [Re-enable debug checks for `copy` and `copy_nonoverlapping`][90041]\n- [Implement `RefUnwindSafe` for `Rc<T>`][87467]\n- [Make RSplit<T, P>: Clone not require T: Clone][90117]\n- [Implement `Termination` for `Result<Infallible, E>`][88601]. This allows writing `fn main() -> Result<Infallible, ErrorType>`, for a program whose successful exits never involve returning from `main` (for instance, a program that calls `exit`, or that uses `exec` to run another program).\n\nStabilized APIs\n---------------\n\n- [`Metadata::is_symlink`]\n- [`Path::is_symlink`]\n- [`{integer}::saturating_div`]\n- [`Option::unwrap_unchecked`]\n- [`Result::unwrap_unchecked`]\n- [`Result::unwrap_err_unchecked`]\n- [`NonZero{unsigned}::is_power_of_two`]\n- [`File::options`]\nThese APIs are now usable in const contexts:\n- [`Duration::new`]\n- [`Duration::checked_add`]\n- [`Duration::saturating_add`]\n- [`Duration::checked_sub`]\n- [`Duration::saturating_sub`]\n- [`Duration::checked_mul`]\n- [`Duration::saturating_mul`]\n- [`Duration::checked_div`]\n- [`MaybeUninit::as_ptr`]\n- [`MaybeUninit::as_mut_ptr`]\n- [`MaybeUninit::assume_init`]\n- [`MaybeUninit::assume_init_ref`]\n\nCargo\n-----\n\n- [Add --message-format for install command][cargo/10107]\n- [Warn when alias shadows external subcommand][cargo/10082]\n\nRustdoc\n-------\n\n- [Show all Deref implementations recursively in rustdoc][90183]\n- [Use computed visibility in rustdoc][88447]\n\nCompatibility Notes\n-------------------\n\n- [Try all stable method candidates first before trying unstable ones][90329]. This change ensures that adding new nightly-only methods to the Rust standard library will not break code invoking methods of the same name from traits outside the standard library.\n- Windows: [`std::process::Command` will no longer search the current directory for executables.][87704]\n- [All proc-macro backward-compatibility lints are now deny-by-default.][88041]\n- [proc_macro: Append .0 to unsuffixed float if it would otherwise become int token][90297]\n- [Refactor weak symbols in std::sys::unix][90846]. This optimizes accesses to glibc functions, by avoiding the use of dlopen. This does not increase the [minimum expected version of glibc](https://doc.rust-lang.org/nightly/rustc/platform-support.html). However, software distributions that use symbol versions to detect library dependencies, and which take weak symbols into account in that analysis, may detect rust binaries as requiring newer versions of glibc.\n- [rustdoc now rejects some unexpected semicolons in doctests][91026]\n\nVersion 1.59.0 (2022-02-24)\n==========================\n\nLanguage\n--------\n\n- [Stabilize default arguments for const generics][90207]\n- [Stabilize destructuring assignment][90521]\n- [Relax private in public lint on generic bounds and where clauses of trait impls][90586]\n- [Stabilize asm! and global_asm! for x86, x86_64, ARM, Aarch64, and RISC-V][91728]\n\nCompiler\n--------\n\n- [Stabilize new symbol mangling format, leaving it opt-in (-Csymbol-mangling-version=v0)][90128]\n- [Emit LLVM optimization remarks when enabled with `-Cremark`][90833]\n- [Fix sparc64 ABI for aggregates with floating point members][91003]\n- [Warn when a `#[test]`-like built-in attribute macro is present multiple times.][91172]\n- [Add support for riscv64gc-unknown-freebsd][91284]\n- [Stabilize `-Z emit-future-incompat` as `--json future-incompat`][91535]\n\nLibraries\n---------\n\n- [Remove unnecessary bounds for some Hash{Map,Set} methods][91593]\n\nStabilized APIs\n---------------\n\n- [`std::thread::available_parallelism`][available_parallelism]\n- [`Result::copied`][result-copied]\n- [`Result::cloned`][result-cloned]\n- [`arch::asm!`][asm]\n- [`arch::global_asm!`][global_asm]\n- [`ops::ControlFlow::is_break`][is_break]\n- [`ops::ControlFlow::is_continue`][is_continue]\n- [`TryFrom<char> for u8`][try_from_char_u8]\n- [`char::TryFromCharError`][try_from_char_err]\n  implementing `Clone`, `Debug`, `Display`, `PartialEq`, `Copy`, `Eq`, `Error`\n- [`iter::zip`][zip]\n- [`NonZeroU8::is_power_of_two`][is_power_of_two8]\n- [`NonZeroU16::is_power_of_two`][is_power_of_two16]\n- [`NonZeroU32::is_power_of_two`][is_power_of_two32]\n- [`NonZeroU64::is_power_of_two`][is_power_of_two64]\n- [`NonZeroU128::is_power_of_two`][is_power_of_two128]\n- [`DoubleEndedIterator for ToLowercase`][lowercase]\n- [`DoubleEndedIterator for ToUppercase`][uppercase]\n- [`TryFrom<&mut [T]> for [T; N]`][tryfrom_ref_arr]\n- [`UnwindSafe for Once`][unwindsafe_once]\n- [`RefUnwindSafe for Once`][refunwindsafe_once]\n- [armv8 neon intrinsics for aarch64][stdarch/1266]\nConst-stable:\n- [`mem::MaybeUninit::as_ptr`][muninit_ptr]\n- [`mem::MaybeUninit::assume_init`][muninit_init]\n- [`mem::MaybeUninit::assume_init_ref`][muninit_init_ref]\n- [`ffi::CStr::from_bytes_with_nul_unchecked`][cstr_from_bytes]\n\nCargo\n-----\n\n- [Stabilize the `strip` profile option][cargo/10088]\n- [Stabilize future-incompat-report][cargo/10165]\n- [Support abbreviating `--release` as `-r`][cargo/10133]\n- [Support `term.quiet` configuration][cargo/10152]\n- [Remove `--host` from cargo {publish,search,login}][cargo/10145]\n\nCompatibility Notes\n-------------------\n\n- [Refactor weak symbols in std::sys::unix][90846]\n  This may add new, versioned, symbols when building with a newer glibc, as the\n  standard library uses weak linkage rather than dynamically attempting to load\n  certain symbols at runtime.\n- [Deprecate crate_type and crate_name nested inside `#![cfg_attr]`][83744]\n  This adds a future compatibility lint to supporting the use of cfg_attr\n  wrapping either crate_type or crate_name specification within Rust files;\n  it is recommended that users migrate to setting the equivalent command line\n  flags.\n- [Remove effect of `#[no_link]` attribute on name resolution][92034]\n  This may expose new names, leading to conflicts with preexisting names in a\n  given namespace and a compilation failure.\n- [Cargo will document libraries before binaries.][cargo/10172]\n- [Respect doc=false in dependencies, not just the root crate][cargo/10201]\n- [Weaken guarantee around advancing underlying iterators in zip][83791]\n- [Make split_inclusive() on an empty slice yield an empty output][89825]\n- [Update std::env::temp_dir to use GetTempPath2 on Windows when available.][89999]\n\nChanges in rust wrapper package:\n\n- Update to version 1.59.0 - for details see the rust1.59 package\n\n- Update package description to help users choose what tooling\n  to install.\n\n- Provide rust+cargo by cargo: all cargo<n> package provide this\n  symbol too. Having the meta package provide it allows OBS to have\n  a generic prefernece on the meta package for all packages 'just'\n  requiring rust+cargo.\n\n- Update to version 1.58.0\n",
			"title": "Details",
			"type": "General"
		},
		{
			"text": "The CVRF data is provided by SUSE under the Creative Commons License 4.0 with Attribution (CC-BY-4.0).",
			"title": "Terms of Use",
			"type": "Legal Disclaimer"
		},
		{
			"text": "openSUSE-SLE-15.3-2022-843,openSUSE-SLE-15.4-2022-843",
			"title": "Patchnames",
			"type": "Details"
		}
	],
	"documentdistribution": "Copyright SUSE LLC under the Creative Commons License 4.0 with Attribution (CC-BY-4.0)",
	"document_references": [
		{
			"type": "Self",
			"url": "https://lists.opensuse.org/archives/list/security-announce@lists.opensuse.org/thread/ZODX3XK3LNWUDIGOVAOXXYOTCRZZ4CMJ/",
			"description": "E-Mail link for openSUSE-SU-2022:0843-1"
		},
		{
			"type": "Self",
			"url": "https://www.suse.com/support/security/rating/",
			"description": "SUSE Security Ratings"
		},
		{
			"type": "Self",
			"url": "https://bugzilla.suse.com/1194767",
			"description": "SUSE Bug 1194767"
		},
		{
			"type": "Self",
			"url": "https://www.suse.com/security/cve/CVE-2022-21658/",
			"description": "SUSE CVE CVE-2022-21658 page"
		}
	],
	"product_tree": {
		"branch": [
			{
				"type": "Product Family",
				"name": "openSUSE Leap 15.3",
				"branch": [
					{
						"type": "Product Name",
						"name": "openSUSE Leap 15.3",
						"full_product_name": {
							"text": "openSUSE Leap 15.3",
							"product_id": "openSUSE Leap 15.3",
							"cpe": "cpe:/o:opensuse:leap:15.3"
						}
					}
				],
				"full_product_name": {}
			},
			{
				"type": "Product Version",
				"name": "cargo-1.59.0-150300.21.20.1",
				"full_product_name": {
					"text": "cargo-1.59.0-150300.21.20.1",
					"product_id": "cargo-1.59.0-150300.21.20.1"
				}
			},
			{
				"type": "Product Version",
				"name": "cargo1.58-1.58.0-150300.7.3.1",
				"full_product_name": {
					"text": "cargo1.58-1.58.0-150300.7.3.1",
					"product_id": "cargo1.58-1.58.0-150300.7.3.1"
				}
			},
			{
				"type": "Product Version",
				"name": "cargo1.59-1.59.0-150300.7.4.2",
				"full_product_name": {
					"text": "cargo1.59-1.59.0-150300.7.4.2",
					"product_id": "cargo1.59-1.59.0-150300.7.4.2"
				}
			},
			{
				"type": "Product Version",
				"name": "rust-1.59.0-150300.21.20.1",
				"full_product_name": {
					"text": "rust-1.59.0-150300.21.20.1",
					"product_id": "rust-1.59.0-150300.21.20.1"
				}
			},
			{
				"type": "Product Version",
				"name": "rust1.58-1.58.0-150300.7.3.1",
				"full_product_name": {
					"text": "rust1.58-1.58.0-150300.7.3.1",
					"product_id": "rust1.58-1.58.0-150300.7.3.1"
				}
			},
			{
				"type": "Product Version",
				"name": "rust1.59-1.59.0-150300.7.4.2",
				"full_product_name": {
					"text": "rust1.59-1.59.0-150300.7.4.2",
					"product_id": "rust1.59-1.59.0-150300.7.4.2"
				}
			}
		],
		"relationship": [
			{
				"product_reference": "cargo-1.59.0-150300.21.20.1",
				"relation_type": "Default Component Of",
				"relates_to_product_reference": "openSUSE Leap 15.3"
			},
			{
				"product_reference": "cargo1.58-1.58.0-150300.7.3.1",
				"relation_type": "Default Component Of",
				"relates_to_product_reference": "openSUSE Leap 15.3"
			},
			{
				"product_reference": "cargo1.59-1.59.0-150300.7.4.2",
				"relation_type": "Default Component Of",
				"relates_to_product_reference": "openSUSE Leap 15.3"
			},
			{
				"product_reference": "rust-1.59.0-150300.21.20.1",
				"relation_type": "Default Component Of",
				"relates_to_product_reference": "openSUSE Leap 15.3"
			},
			{
				"product_reference": "rust1.58-1.58.0-150300.7.3.1",
				"relation_type": "Default Component Of",
				"relates_to_product_reference": "openSUSE Leap 15.3"
			},
			{
				"product_reference": "rust1.59-1.59.0-150300.7.4.2",
				"relation_type": "Default Component Of",
				"relates_to_product_reference": "openSUSE Leap 15.3"
			}
		]
	},
	"vulnerability": [
		{
			"notes": [
				{
					"text": "Rust is a multi-paradigm, general-purpose programming language designed for performance and safety, especially safe concurrency. The Rust Security Response WG was notified that the `std::fs::remove_dir_all` standard library function is vulnerable a race condition enabling symlink following (CWE-363). An attacker could use this security issue to trick a privileged program into deleting files and directories the attacker couldn't otherwise access or delete. Rust 1.0.0 through Rust 1.58.0 is affected by this vulnerability with 1.58.1 containing a patch. Note that the following build targets don't have usable APIs to properly mitigate the attack, and are thus still vulnerable even with a patched toolchain: macOS before version 10.10 (Yosemite) and REDOX. We recommend everyone to update to Rust 1.58.1 as soon as possible, especially people developing programs expected to run in privileged contexts (including system daemons and setuid binaries), as those have the highest risk of being affected by this. Note that adding checks in your codebase before calling remove_dir_all will not mitigate the vulnerability, as they would also be vulnerable to race conditions like remove_dir_all itself. The existing mitigation is working as intended outside of race conditions.",
					"title": "Vulnerability Description",
					"type": "General"
				}
			],
			"cve": "CVE-2022-21658",
			"product_statuses": [
				{
					"type": "Fixed",
					"product_id": [
						"openSUSE Leap 15.3:cargo-1.59.0-150300.21.20.1",
						"openSUSE Leap 15.3:cargo1.58-1.58.0-150300.7.3.1",
						"openSUSE Leap 15.3:cargo1.59-1.59.0-150300.7.4.2",
						"openSUSE Leap 15.3:rust-1.59.0-150300.21.20.1",
						"openSUSE Leap 15.3:rust1.58-1.58.0-150300.7.3.1",
						"openSUSE Leap 15.3:rust1.59-1.59.0-150300.7.4.2"
					]
				}
			],
			"threats": [
				{
					"type": "Impact",
					"description": "moderate"
				}
			],
			"cvss_score_sets": {
				"score_set_v_2": {
					"base_score_v_2": "3.3",
					"vector_v_2": "AV:L/AC:M/Au:N/C:N/I:P/A:P"
				},
				"score_set_v_3": {
					"base_score_v_3": "6.2",
					"vector_v_3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N"
				},
				"scoreset": {}
			},
			"remediations": [
				{
					"type": "Vendor Fix",
					"description": {
						"text": "To install this SUSE Security Update use the SUSE recommended installation methods like YaST online_update or \"zypper patch\".\n",
						"lang": "en"
					},
					"url": "https://lists.opensuse.org/archives/list/security-announce@lists.opensuse.org/thread/ZODX3XK3LNWUDIGOVAOXXYOTCRZZ4CMJ/"
				}
			],
			"references": [
				{
					"url": "https://www.suse.com/security/cve/CVE-2022-21658.html",
					"description": "CVE-2022-21658"
				},
				{
					"url": "https://bugzilla.suse.com/1194767",
					"description": "SUSE Bug 1194767"
				}
			]
		}
	]
}
